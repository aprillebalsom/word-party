{"version":3,"sources":["firebase.js","Header.js","List.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","exit","icon","faTimes","List","callRemove","props","removeHandle","title","key","this","listKey","onClick","list","React","Component","Footer","href","trashCan","faTrash","App","handleRemove","database","ref","child","remove","getRhy","axios","url","params","max","rel_rhy","state","rhymeInput","then","response","wordsResults","data","setState","words","getSyn","ml","synInput","handleChange","event","wordInput","target","value","handleRhy","alert","handleSyn","toggleModal","poemLibrary","length","checkWords","listOfWords","includes","console","log","displayModal","addToList","push","savedWords","showModal","on","newState","val","wordObject","wordArray","show","htmlFor","type","id","onChange","placeholder","map","singleWord","score","word","poem","wordList","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9227385.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst firebaseConfig = {\n\tapiKey: 'AIzaSyCS6fkr1nkfcWbuxowQcwS55dUFGm9qa8g',\n\tauthDomain: 'wordparty-92c9f.firebaseapp.com',\n\tdatabaseURL: 'https://wordparty-92c9f.firebaseio.com',\n\tprojectId: 'wordparty-92c9f',\n\tstorageBucket: 'wordparty-92c9f.appspot.com',\n\tmessagingSenderId: '410418051346',\n\tappId: '1:410418051346:web:10cd4fb319baf427c8dbcb',\n};\n // Initialize Firebase\n firebase.initializeApp(firebaseConfig);\n\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from 'react';\n\nconst Header = () => {\n\treturn (\n\t\t<header>\n\t\t\t<div className=\"wrapper headerFlex\">\n                <h1>Word Party</h1>\n                {/* TODO may not need class */}\n                <p className='tagLine'>Expand your vocabulary and create rhyming schemes with Word Party</p>\n            </div>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst exit = <FontAwesomeIcon icon={faTimes} />;\n\n\nclass List extends React.Component {\n\n        callRemove = () => {\n            this.props.removeHandle(this.props.title)\n        }\n    render() {\n        return (\n            \n            <li key={this.props.listKey}>\n                <button className=\"removeList\" title='remove' onClick={this.callRemove}>\n                <span className='srOnly'>\n                        Delete this list by clicking here.\n\t\t\t\t        </span>{exit}</button>\n                \n                <h3>{this.props.title}</h3>\n\n                \n                {this.props.list}\n                \n            </li>\n        )\n    }\n}\n\nexport default List;","import React, { Component } from 'react'\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className=\"footer\">\n                <p>\n                    Created at <a href=\"https://junocollege.com/\">Juno College</a> by:\n                </p>\n                <p>\n                    <a href=\"https://github.com/thomasDotOnline\">Thomas</a>\n                    , <a href=\"https://github.com/bksokhi\">Baljit</a>\n                    , <a href=\"https://github.com/hshaikhnbake\">Haris</a>,\n                    and <a href=\"https://github.com/aprillebalsom\">Aprille</a>\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport firebase from './firebase';\nimport ToggleDisplay from 'react-toggle-display';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faTimes} from '@fortawesome/free-solid-svg-icons';\n\n//IMPORTING COMPONENTS\nimport Header from './Header.js';\nimport List from './List.js'\nimport Footer from './Footer.js';\n\n//FONT AWESOME ICONS\nconst trashCan = <FontAwesomeIcon icon={faTrash} />;\nconst exit = <FontAwesomeIcon icon={faTimes} />;\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ttitle: '',\n\t\t\trhymeInput: '',\n\t\t\tsynInput: '',\n\t\t\twords: [],\n\t\t\twordInput: '',\n\t\t\tsavedWords: '',\n\t\t\tpoemLibrary: [],\n\n\t\t\tshowModal: false,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst dbRef = firebase.database().ref();\n\n\t\tdbRef.on('value', (response) => {\n\t\t\tconst newState = [];\n\t\t\tconst data = response.val();\n\n\t\t\tfor (let key in data) {\n\t\t\t\tconst wordObject = data[key];\n\t\t\t\tconst wordArray = [];\n\n\t\t\t\tfor (let title in wordObject) {\n\t\t\t\t\twordArray.push(wordObject[title]);\n\t\t\t\t}\n\n\t\t\t\tnewState.push({\n\t\t\t\t\tkey: key,\n\t\t\t\t\tlistOfWords: wordArray,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tpoemLibrary: newState,\n\t\t\t});\n\t\t});\n\t}\n\n\thandleRemove = (listKey) => {\n\t\tconst dbRef = firebase.database().ref();\n\t\tdbRef.child(listKey).remove();\n\t};\n\n\t// Retrieves Rhyme Results off API based on User Input\n\tgetRhy = () => {\n\t\taxios({\n\t\t\turl: 'https://api.datamuse.com/words',\n\t\t\tparams: {\n\t\t\t\tmax: 12,\n\t\t\t\trel_rhy: this.state.rhymeInput,\n\t\t\t},\n\t\t}).then((response) => {\n\t\t\tlet wordsResults = response.data;\n\t\t\tthis.setState({\n\t\t\t\twords: wordsResults,\n\t\t\t});\n\t\t});\n\t};\n\n\t// Retrieves Synonymn Results off API based on User Input\n\tgetSyn = () => {\n\t\taxios({\n\t\t\turl: 'https://api.datamuse.com/words',\n\t\t\tparams: {\n\t\t\t\tmax: 10,\n\t\t\t\tml: this.state.synInput,\n\t\t\t},\n\t\t}).then((response) => {\n\t\t\tlet wordsResults = response.data;\n\t\t\tthis.setState({\n\t\t\t\twords: wordsResults,\n\t\t\t});\n\t\t});\n\t};\n\n\t// Logs user input and saves to state\n\thandleChange = (event) => {\n\t\tlet wordInput = event.target.value;\n\t\tthis.setState({\n\t\t\twordInput,\n\t\t});\n\t};\n\n\t// onClick Handle to get list of rhyming words and to place rhyme words in state\n\thandleRhy = () => {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\trhymeInput: this.state.wordInput,\n\t\t\t\ttitle: this.state.wordInput,\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tif (this.state.wordInput === '') {\n\t\t\t\t\talert('This is empty!');\n\t\t\t\t} else {\n\t\t\t\t\tthis.getRhy();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t};\n\n\t// onClick Handle to get list of synonymns and to place these words in state\n\n\thandleSyn = () => {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tsynInput: this.state.wordInput,\n\t\t\t\ttitle: this.state.wordInput,\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tif (this.state.wordInput === '') {\n\t\t\t\t\talert('This is empty!');\n\t\t\t\t} else {\n\t\t\t\t\tthis.getSyn();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t};\n\n\ttoggleModal = (event) => {\n\n    if (this.state.poemLibrary.length > 0){\n      \n\t\tconst checkWords = this.state.poemLibrary[0].listOfWords.includes(event.target.value)\n    console.log(checkWords);\n    \n    checkWords ? this.displayModal() : this.addToList(event.target.value);\n    } else {\n      this.addToList(event.target.value);\n    }\n\n\n\t};\n\n\taddToList = (value) => {\n\t\tconst dbRef = firebase.database().ref(this.state.title);\n\t\tdbRef.push(value);\n\n\t\tthis.setState({\n\t\t\tsavedWords: value,\n\t\t});\n\t};\n\n\tdisplayModal = () => {\n\t\tthis.setState({\n\t\t\tshowModal: !this.state.showModal,\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<Header />\n\n\t\t\t\t<main className='wrapper'>\n\t\t\t\t\t<ToggleDisplay show={this.state.showModal}>\n\t\t\t\t\t\t<div className='modal'>\n\t\t\t\t\t\t\t<div className='modalContent'>\n\t\t\t\t\t\t\t\t<h3>Oops!</h3>\n\t\t\t\t\t\t\t\t<p>Looks like this word has already been added to your list!</p>\n\t\t\t\t\t\t\t\t<button className='closeModal' onClick={this.displayModal}>\n\t\t\t\t\t\t\t\t\t<span className='srOnly'>\n\t\t\t\t\t\t\t\t\t\tClose this pop-up modal by clicking here.\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t{exit}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ToggleDisplay>\n\n\t\t\t\t\t<section className='form'>\n\t\t\t\t\t\t<label htmlFor='chosenWord'>Enter A Word</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tid='chosenWord'\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\tvalue={this.state.wordInput}\n\t\t\t\t\t\t\tplaceholder='Ex: Happy'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<h2>What kind of words would you like?</h2>\n\t\t\t\t\t\t<div className='buttonFlex'>\n\t\t\t\t\t\t\t<button onClick={() => this.handleSyn()}>Synonyms</button>\n\t\t\t\t\t\t\t<p>or</p>\n\t\t\t\t\t\t\t<button onClick={() => this.handleRhy()}>Rhymes</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section className='displayedWords'>\n\t\t\t\t\t\t<h2>{this.state.title}</h2>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{this.state.words.map((singleWord) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li key={singleWord.score} className='wordContainer'>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tvalue={singleWord.word}\n\t\t\t\t\t\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\t\t\t\t\t\tthis.toggleModal\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{singleWord.word}\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section className='poemLists'>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{this.state.poemLibrary.map((poem) => {\n\t\t\t\t\t\t\t\tconst myObject = poem.listOfWords;\n\n\t\t\t\t\t\t\t\t// const alreadyAdded = myObject.filter((singleword) => {\n\t\t\t\t\t\t\t\t// \treturn singleword === this.state.savedWords;\n\t\t\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t\t\t// // const callModal = .length > 1;\n\t\t\t\t\t\t\t\t// // console.log(alreadyAdded);\n\n\t\t\t\t\t\t\t\t// // alreadyAdded.length > 1\n\n\t\t\t\t\t\t\t\tconst wordList = myObject.map((word, index) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div className='words' key={index}>\n\t\t\t\t\t\t\t\t\t\t\t<p>{word}</p>\n\n\t\t\t\t\t\t\t\t\t\t\t<span className='srOnly'>\n\t\t\t\t\t\t\t\t\t\t\t\tDelete this word by clicking here.\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t<button title='remove'>{trashCan}</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<List\n\t\t\t\t\t\t\t\t\t\tkey={poem.key}\n\t\t\t\t\t\t\t\t\t\ttitle={poem.key}\n\t\t\t\t\t\t\t\t\t\tlist={wordList}\n\t\t\t\t\t\t\t\t\t\tlistKey={poem.key}\n\t\t\t\t\t\t\t\t\t\tremoveHandle={this.handleRemove}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>\n\t\t\t\t</main>\n\n\t\t\t\t<footer>\n\t\t\t\t\t<Footer />\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}