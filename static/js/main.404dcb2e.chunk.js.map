{"version":3,"sources":["firebase.js","Header.js","Modal.js","List.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","exit","icon","faTimes","Modal","callModal","props","showTheModal","this","pTag","onClick","React","Component","List","callRemove","removeHandle","title","key","listKey","list","Footer","href","App","getSyn","axios","url","params","max","ml","state","synInput","then","response","wordsResults","data","length","displayNoResultsModal","setState","words","showDisplayedWords","getRhy","rel_rhy","rhymeInput","handleChange","event","wordInput","target","value","handleRhy","displayFormModal","handleSyn","noResultsModal","showFormModal","toggleModal","poemLibrary","listIndex","map","indexOf","listOfWords","includes","displayModal","addToList","database","ref","push","savedWords","showModal","handleRemove","child","remove","on","newState","val","wordObject","wordArray","htmlFor","type","id","onChange","placeholder","show","singleWord","score","word","poem","wordList","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.404dcb2e.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst firebaseConfig = {\n\tapiKey: 'AIzaSyCS6fkr1nkfcWbuxowQcwS55dUFGm9qa8g',\n\tauthDomain: 'wordparty-92c9f.firebaseapp.com',\n\tdatabaseURL: 'https://wordparty-92c9f.firebaseio.com',\n\tprojectId: 'wordparty-92c9f',\n\tstorageBucket: 'wordparty-92c9f.appspot.com',\n\tmessagingSenderId: '410418051346',\n\tappId: '1:410418051346:web:10cd4fb319baf427c8dbcb',\n};\n\n // Initialize Firebase\n firebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from 'react';\n\nconst Header = () => {\n\treturn (\n\t\t<header>\n\t\t\t<div className='wrapper headerFlex'>\n                <h1>Word Party</h1>\n                <p>Expand your vocabulary and create rhyming schemes with Word Party</p>\n            </div>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React from 'react';\n\n// FONT AWESOME ICON\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst exit = <FontAwesomeIcon icon={faTimes} />;\n\nclass Modal extends React.Component {\n\n\t// callModal function is passing a prop that call the modal in the App.js component\n\tcallModal = () => {\n\t\tthis.props.showTheModal();\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='modal'>\n\t\t\t\t<div className='modalContent'>\n\t\t\t\t\t<h3>Oops!</h3>\n\t\t\t\t\t<p>{this.props.pTag}</p>\n\t\t\t\t\t<button className='closeModal' onClick={this.callModal}>\n\t\t\t\t\t\t<span className='srOnly'>\n\t\t\t\t\t\t\tClose this pop-up modal by clicking here.\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t{exit}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Modal;\n\n","import React from 'react';\n\n// FONT AWESOME ICON\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nconst exit = <FontAwesomeIcon icon={faTimes} />;\n\n\nclass List extends React.Component {\n\n    // callRemove function is passing a prop that removes the list via removeHandle in the App.js component\n    callRemove = () => {\n        this.props.removeHandle(this.props.title)\n    }\n\n    render() {\n        return (\n            <li key={this.props.listKey}>\n\n                <h3>{this.props.title}</h3>\n                {this.props.list}\n                <button\n                    className='removeList'\n                    title='remove'\n                    onClick={this.callRemove}\n                >\n                    <span className='srOnly'>Delete this list by clicking here.</span>\n                    {exit}\n                </button>\n\n            </li>\n\t\t);\n    }\n}\n\nexport default List;","import React, { Component } from 'react'\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <p>\n                    Created at <a href='https://junocollege.com/'>Juno College</a> by:\n                </p>\n                <p>\n                    <a href='https://github.com/thomasDotOnline'>Thomas</a>,{' '} \n                    <a href='https://github.com/bksokhi'>Baljit</a>,{' '} \n                    <a href='https://github.com/hshaikhnbake'>Haris</a>, and{' '} \n                    <a href='https://github.com/aprillebalsom'>Aprille</a>\n                </p>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport firebase from './firebase';\nimport ToggleDisplay from 'react-toggle-display';\n\n// IMPORTING COMPONENTS\nimport Header from './Header.js';\nimport Modal from './Modal.js';\nimport List from './List.js'\nimport Footer from './Footer.js';\n\n// App States by default\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      title: '',\n      rhymeInput: '',\n      synInput: '',\n      words: [],\n      wordInput: '',\n      savedWords: '',\n      poemLibrary: [],\n      showFormModal: false,\n      showDisplayedWords: false,\n\t    showModal: false,\n\t    noResultsModal: false,\n    };\n  }\n\n  // Connection to Firebase, pulling data from firebase and pushing them into new states. \n  componentDidMount() {\n    const dbRef = firebase.database().ref(); \n\n    dbRef.on('value', (response) => {\n      const newState = [];\n      const data = response.val();\n\n      for (let key in data) {\n        const wordObject = data[key];\n        const wordArray = [];\n\n        for (let title in wordObject) {\n          wordArray.push(wordObject[title]);\n        }\n\n        // Push wordArray into listOfWords\n        newState.push({\n          key: key,  // list Title\n          listOfWords: wordArray, // saved words\n        });\n      }\n\n      // Updating poemLibrary state with newState array\n      this.setState({\n        poemLibrary: newState,\n      });\n\n    });\n  }\n\n  // Retrieves synonymn results off API based on user input\n  getSyn = () => {\n    axios({\n      url: 'https://api.datamuse.com/words',\n      params: {\n        max: 12,\n        ml: this.state.synInput,\n      },\n    }).then((response) => {\n      let wordsResults = response.data;\n      if (wordsResults.length === 0) {\n        this.displayNoResultsModal();\n      }\n      this.setState({\n        words: wordsResults,\n        showDisplayedWords: true,\n      });\n    });\n  }\n\n  // Retrieves rhyme results off API based on user input\n  getRhy = () => {\n    axios({\n      url: 'https://api.datamuse.com/words',\n      params: {\n        max: 12,\n        rel_rhy: this.state.rhymeInput,\n      },\n    }).then((response) => {\n      let wordsResults = response.data;\n      if (wordsResults.length === 0) {\n        this.displayNoResultsModal();\n      }\n      this.setState({\n        words: wordsResults,\n        showDisplayedWords: true,\n      });\n    });\n  }\n  \n  // Logs user input and saves to state\n  handleChange = (event) => {\n    let wordInput = event.target.value;\n    this.setState({\n      wordInput,\n    });\n  }\n\n  // onClick Handle to get list of rhyming words and to place rhyming words in state\n  handleRhy = () => {\n    this.setState(\n      {\n        rhymeInput: this.state.wordInput,\n        title: this.state.wordInput,\n      },\n      () => {\n        if (this.state.wordInput === '') {\n          this.displayFormModal();\n        } else {\n          this.getRhy();\n        }\n      }\n    );\n  }\n\n  // onClick Handle to get list of synonymns and to place these words in state\n  handleSyn = () => {\n    this.setState(\n      {\n        synInput: this.state.wordInput,\n        title: this.state.wordInput,\n      },\n      () => {\n        if (this.state.wordInput === '') {\n          this.displayFormModal();\n        } else {\n          this.getSyn();\n        }\n      }\n    );\n  }\n\n  // Modal Function/Error Handler if API provides no results\n  displayNoResultsModal = () => {\n    this.setState({\n      noResultsModal: !this.state.noResultsModal,\n    });\n  }\n\n  // Modal Function/Error Handler if text input box is empty\n  displayFormModal = () => {\n    this.setState({\n      showFormModal: !this.state.showFormModal,\n    });\n  }\n\n  //Modal Function/Error Handler if user selects the same word twice\n  toggleModal = (event) => {\n    if (this.state.poemLibrary.length > 0) {\n      // Mapping through poemLibrary, accessing 'key' property which holds list title, and finding index number\n      const listIndex = this.state.poemLibrary.map((list) => list.key).indexOf(this.state.title); \n\n     // Checking to see if selected word already exists in listOfWords array\n      if (listIndex > -1) {\n        const checkWords = this.state.poemLibrary[listIndex].listOfWords.includes(event.target.value);\n\n        // If there's a matching word in listOfWords, it call the function that displays modal\n        if (checkWords) {\n          this.displayModal();\n\n        // If false, it will add word to list\n        } else {\n          this.addToList(event.target.value);\n        }\n\n      } else {\n        this.addToList(event.target.value);\n      }\n\n    // If list doesn't exist in Firebase, add it\n    } else { \n      this.addToList(event.target.value);\n    }\n  }\n\n  // Adding save words to appropriate title in firebase if the title doesn't exist, it will be added \n  addToList = (value) => {\n    const dbRef = firebase.database().ref(this.state.title);\n    dbRef.push(value);\n\n    this.setState({\n      savedWords: value,\n    });\n  }\n\n  // Modal Function/Error Handler if user adds the same word twice\n  displayModal = () => {\n    this.setState({\n      showModal: !this.state.showModal,\n    });\n  }\n\n  // Removing list from Firebase when button is clicked\n  handleRemove = (listKey) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(listKey).remove();\n  }\n\n  render() {\n    return (\n\t\t\t<div className='App'>\n        \n\t\t\t\t<Header />\n\n\t\t\t\t<main className='wrapper'>\n\n\t\t\t\t\t{/*section that takes in user input*/}\n\t\t\t\t\t<section className='form'>\n            <h2>Enter A Word</h2>\n\t\t\t\t\t\t<label className='srOnly' htmlFor='chosenWord'>Enter A Word</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tid='chosenWord'\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\tvalue={this.state.wordInput}\n\t\t\t\t\t\t\tplaceholder='Ex: Happy'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<h2 className='question'>What kind of words would you like?</h2>\n\t\t\t\t\t\t<div className='buttonFlex'>\n\t\t\t\t\t\t\t<button onClick={() => this.handleSyn()}>Synonyms</button>\n\t\t\t\t\t\t\t<p>or</p>\n\t\t\t\t\t\t\t<button onClick={() => this.handleRhy()}>Rhymes</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\n          {/* error handling modal if input is blank when submitted */}\n          <ToggleDisplay show={this.state.showFormModal}>\n            <Modal\n              pTag='Please enter a word and try again!'\n              showTheModal={this.displayFormModal}\n            />\n          </ToggleDisplay>\n\n          {/* error handling modal if API call returns no results */}\n          <ToggleDisplay show={this.state.noResultsModal}>\n            <Modal\n              pTag=\"Looks like we can't find any results, please try another word!\"\n              showTheModal={this.displayNoResultsModal}\n            />\n          </ToggleDisplay>\n\n          {/* error handling modal if user tries to add same word to a list twice */}\n          <ToggleDisplay show={this.state.showModal}>\n            <Modal\n              pTag='Looks like this word has already been added to your list!'\n              showTheModal={this.displayModal}\n            />\n          </ToggleDisplay>\n\n\t\t\t\t\t{/*section where API call results are displayed*/}\n\t\t\t\t\t<ToggleDisplay show={this.state.showDisplayedWords}>\n\t\t\t\t\t\t<section className='displayedWords'>\n\t\t\t\t\t\t\t<h2>{this.state.title}</h2>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t{this.state.words.map((singleWord) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<li key={singleWord.score}>\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={singleWord.word}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.toggleModal}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{singleWord.word}\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</ToggleDisplay>\n\n\t\t\t\t\t{/* Display firebase data/saved lists */}\n\t\t\t\t\t<section className='poemLists'>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{/* Accessing poemLibrary array and mapping over it to access saved listOfWords array. Accessing listOfWords array and mapping over it to render individual words in array */}\n\t\t\t\t\t\t\t{this.state.poemLibrary.map((poem) => {\n\t\t\t\t\t\t\t\tconst myObject = poem.listOfWords;\n\t\t\t\t\t\t\t\tconst wordList = myObject.map((word, index) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div className='words' key={index}>\n\t\t\t\t\t\t\t\t\t\t\t<p className='word'>{word}</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t// List Component that holds our words that are stored in Firebase\n\t\t\t\t\t\t\t\t\t<List\n\t\t\t\t\t\t\t\t\t\tkey={poem.key}\n\t\t\t\t\t\t\t\t\t\ttitle={poem.key}\n\t\t\t\t\t\t\t\t\t\tlist={wordList}\n\t\t\t\t\t\t\t\t\t\tlistKey={poem.key}\n\t\t\t\t\t\t\t\t\t\tremoveHandle={this.handleRemove}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>\n\t\t\t\t</main>\n\n\t\t\t\t<Footer />\n\n\t\t\t</div>\n\t\t);\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}